{"version":3,"sources":["components/Title.js","components/SearchForm.js","components/Movie.js","components/MoviesList.js","pages/Home.js","components/ButtonBackToHome.js","pages/Detail.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Title","children","className","SearchForm","state","inputMovie","_handleChange","e","setState","target","value","_handleSubmit","preventDefault","fetch","then","res","json","results","Search","totalResults","console","log","props","onResults","onSubmit","this","onChange","type","placeholder","Component","Movie","id","poster","title","year","to","alt","src","MoviesList","movies","map","movie","key","imdbID","Year","Poster","Home","usedSearch","_handleResults","length","_renderResults","ButtonBackToHome","Detail","movieId","match","params","_fetchMovie","Actors","Metascore","Plot","NotFound","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6314c251.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Title = ({children}) =>(\n    <h1 className=\"title\">{children}</h1>\n)","import React, {Component} from 'react'\n\nconst API_KEY = '7a3109e2'\n\nexport class SearchForm extends Component{\n    state ={\n        inputMovie:''\n    }\n\n    _handleChange= (e)=> {\n        this.setState({inputMovie: e.target.value})\n    }\n\n    _handleSubmit  = (e) =>{\n        e.preventDefault()\n        const {inputMovie}=this.state\n\n        fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&s=${inputMovie}`)\n            .then(res => res.json())\n            .then(results => {\n                const{Search = [], totalResults = \"0\"} = results\n                console.log({Search, totalResults})\n                this.props.onResults(Search)\n            })\n    }\n\n    render(){\n        return (\n            <form onSubmit={this._handleSubmit}>\n                <div className=\"field has-addons\">\n                    <div className=\"control\">\n                        <input \n                            className=\"input\" \n                            onChange={this._handleChange}\n                            type=\"text\" \n                            placeholder=\"Buscar pelicula...\"/>\n                    </div>\n                    <div className=\"control\">\n                        <button className=\"button is-info\">\n                        Buscar\n                        </button>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {Link} from 'react-router-dom'\n\nexport class Movie extends Component{\n    static propTypes = {\n        id: PropTypes.string,\n        title: PropTypes.string,\n        year: PropTypes.string,\n        poster: PropTypes.string\n    }\n\n    render () {\n        const {id, poster, title, year}=this.props\n        return (\n            <Link to={`/detail/${id}`} className=\"card\">\n                <div className=\"card-image\">\n                    <figure className=\"image\">\n                        <img\n                            alt={title}\n                            src={poster}\n                        />\n                    </figure>\n                </div>\n                    <div className=\"card-content\">\n                        <div className=\"media\">\n                            <div className=\"media-content\">\n                                <p className=\"title is-4\">{title}</p>\n                                <p className=\"subtitle is-6\">{year}</p>\n                            </div>\n                        </div>\n                    </div>\n            </Link>\n    )\n  }\n}","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {Movie} from './Movie'\n\nexport class MoviesList extends Component{\n    static propTypes ={\n        movies: PropTypes.array\n    }\n\n    render(){\n        const {movies} = this.props\n\n        return (\n            <div className='MoviesList'>\n                {\n                    movies.map(movie => {\n                        return (\n                            <div key={movie.imdbID} className='MoviesList-item'>\n                                <Movie\n                                    id={movie.imdbID}\n                                    title={movie.Title}\n                                    year={movie.Year}\n                                    poster={movie.Poster}\n                                />\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\n\nimport { Title } from '../components/Title'\nimport { SearchForm } from '../components/SearchForm'\nimport { MoviesList } from '../components/MoviesList'\n\nexport class Home extends Component {\n  state = { usedSearch: false, results: [] }\n\n  _handleResults = (results) => {\n    this.setState({ results, usedSearch: true })\n  }\n\n  _renderResults () {\n    return this.state.results.length === 0\n      ? <p>Oh! ðŸ˜ž Lo siento, resultado no encontrado</p>\n      : <MoviesList movies={this.state.results} />\n  }\n\n  render () {\n    return (\n      <div>\n        <Title>Search Movies</Title>\n        <div className='SearchForm-wrapper'>\n          <SearchForm onResults={this._handleResults} />\n        </div>\n        {this.state.usedSearch\n          ? this._renderResults()\n          : <small>Use the form to search a movie</small>\n        }\n      </div>\n    )\n  }\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const ButtonBackToHome = () => (\n  <Link\n    className='button is-info'\n    to='/'>\n    Volver a la portada\n  </Link>\n)","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport { ButtonBackToHome } from '../components/ButtonBackToHome'\n\nconst API_KEY='7a3109e2'\n\nexport class Detail extends Component{\n    static propTypes = {\n        match: PropTypes.shape({\n            params: PropTypes.object,\n            isExact: PropTypes.bool,\n            path: PropTypes.string,\n            url: PropTypes.string\n        })\n    }\n\n    state={movie:{}}\n\n    _fetchMovie ({ id }) {\n        fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&i=${id}`)\n            .then(res => res.json())\n            .then(movie => {\n                console.log({ movie })\n                this.setState({ movie })\n        })\n    }\n\n    componentDidMount () {\n        console.log(this.props)\n        const { movieId } = this.props.match.params\n        this._fetchMovie({ id: movieId })\n    }\n\n\n    render () {\n        const { Title, Poster, Actors, Metascore, Plot } = this.state.movie\n\n        return (\n            <div>\n                <ButtonBackToHome />\n                <h1>{Title}</h1>\n                <img src={Poster}/>\n                <h3>{Actors}</h3>\n                <span>{Metascore}</span>\n                <p>{Plot}</p>\n            </div>\n          )\n    }\n}","import React from 'react'\nimport { ButtonBackToHome } from '../components/ButtonBackToHome'\n\nexport const NotFound = () => (\n  <div>\n    <h1 className='title'>404!</h1>\n    <h2 className='subtitle'>No existe la pÃ¡gina</h2>\n    <ButtonBackToHome />\n  </div>\n)","import React, { Component } from 'react';\nimport './App.css';\nimport 'bulma/css/bulma.css'\nimport { Switch, Route } from 'react-router-dom'\n\n/* import {Title} from './components/Title'\nimport {SearchForm} from './components/SearchForm'\nimport { MoviesList } from './components/MoviesList'\nimport {Detail} from './pages/Detail' */\n\nimport { Home } from './pages/Home'\nimport { Detail } from './pages/Detail'\nimport { NotFound } from './pages/NotFound'\n\n/* class App extends Component {\n  state = {usedSearch: false, results: []}\n\n  _hadleResults = (results) => {\n    this.setState({results, usedSearch: true})\n  }\n\n  _renderResults (){\n    return this.state.results.length === 0\n      ? <p>!Oh! Lo siento, resultados no encontrados</p>\n      : <MoviesList movies={this.state.results} />\n  }\n\n  render() {\n      const url= new URL (document.location)\n      const hasId = url.searchParams.has('id')\n\n      if (hasId){\n        return <Detail id={url.searchParams.get('id')}/>\n      }\n\n    return (\n      <div className=\"App\">\n        <Title>Busqueda de peliculas</Title>\n        <div className='SearchForm-wrapper'>\n          <SearchForm onResults={this._hadleResults}/>\n        </div>\n        {this.state.usedSearch\n          ? this._renderResults()\n          : <small>Usa la pestaÃ±a para buscar una pelicula</small>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App;\n */\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route path='/detail/:movieId' component={Detail} />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n    <BrowserRouter>\n        <App /> \n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}